name: CI

on: [push, pull_request]

jobs:

  test:
    runs-on: ${{ matrix.os }}
    name: test${{ matrix.name-suffix }} (${{ matrix.os }}, ${{ matrix.build-type }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build-type: [Release, Debug]
        openmp: [false]
        name-suffix: [""]
        include:
          - build-type: Debug
            excludetests: solver
          - openmp: true
            name-suffix: "-openmp"
            os: ubuntu-latest
            build-type: Release
          - openmp: true
            name-suffix: "-openmp"
            os: macos-latest
            build-type: Release
    env:
      BUILD_TYPE: ${{ matrix.build-type }}
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF
      OMP_NUM_THREADS: 4
      EXCLUDETESTS: ${{ matrix.excludetests }}

    steps:
    - uses: actions/checkout@v2

    - name: üìö Install required system packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Install OpenMP on macos
      if: matrix.openmp == true && matrix.os == 'macos-latest'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        brew install llvm
        brew install libomp
        llvm_path="$(brew --prefix llvm)"
        USER_COMPILER_C="${llvm_path}/bin/clang"
        USER_COMPILER_CXX="${llvm_path}/bin/clang++"
        OpenMP_INCLUDE_DIR="$(brew --prefix libomp)"
        echo CMAKE_FLAGS="$CMAKE_FLAGS -DOpenMP_CXX_INCLUDE_DIR=${OpenMP_INCLUDE_DIR} -DCMAKE_C_COMPILER=${USER_COMPILER_C} -DCMAKE_CXX_COMPILER=${USER_COMPILER_CXX}" >> $GITHUB_ENV

    - name: ‚öô Configure with OpenMP
      if: matrix.openmp == true
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DSPIRIT_USE_OPENMP=ON

    - name: ‚öô Configure
      if: matrix.openmp == false
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install python packages
      run: pip install --user numpy

    - name: üß™ Test
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE -E $EXCLUDETESTS --output-on-failure

  test-coverage:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_TEST_COVERAGE=ON

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config Release -j 2

    - name: üìö Install necessary packages
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy coverage 'coveralls<3' wheel
        sudo apt update
        sudo apt install lcov

    - name: üß™ Generate C++ coverage
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        lcov -c -i --no-external --directory . --base-directory $GITHUB_WORKSPACE/core -o baseline.info
        make test
        lcov -c --no-external --directory . --base-directory $GITHUB_WORKSPACE/core -o after_test.info
        lcov -a baseline.info -a after_test.info -o total_test.info
        lcov -r total_test.info \*thirdparty\* \*/test/\* \*Collection\* \*DLL_\* -o coverage.info
    - name: ‚¨Ü Upload C++ coverage
      uses: codecov/codecov-action@v1
      with:
        files: ${{runner.workspace}}/build/coverage.info

    - name: üß™ Python API coverage
      working-directory: ./core/python
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        coverage run --source spirit --omit=spirit/spiritlib.py setup.py test > cov.txt
        head cov.txt
        coverage report -m
        coverage xml
        coveralls

  test-pinning-defects:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_ENABLE_PINNING=ON -DSPIRIT_ENABLE_DEFECTS=ON

    steps:
    - uses: actions/checkout@v2

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install python packages
      run: pip install --user numpy

    - name: üß™ Test
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE --output-on-failure

  build-cuda:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-20.04
          - os: ubuntu-18.04
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_USE_CUDA=ON -DSPIRIT_CUDA_ARCH=sm_70

    steps:
    - uses: actions/checkout@v2

    - name: üìö Install CUDA
      run: |
        sudo apt update
        sudo apt install nvidia-cuda-toolkit

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

  build-ui-qt:
    runs-on: ubuntu-18.04
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_UI_CXX_USE_QT=ON

    steps:
    - uses: actions/checkout@v2

    - name: üìö Install Qt5
      run: |
        sudo apt update
        sudo apt install qt5-default libqt5charts5-dev

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

  webapp-mobile:
    runs-on: ubuntu-20.04
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_BUILD_FOR_JS=ON
      EMSCRIPTEN_VERSION: "1.39.20"

    steps:
    - uses: actions/checkout@v2

    - name: üìö Install Emscripten
      working-directory: ${{runner.workspace}}
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DCMAKE_TOOLCHAIN_FILE=${{runner.workspace}}/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake --build . --config $BUILD_TYPE -j 2

    - name: üì¶ Archive mobile web app
      uses: actions/upload-artifact@v2
      with:
        name: webapp-mobile
        path: ui-web/

  webapp-desktop:
    runs-on: ubuntu-20.04
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_BUILD_FOR_JS=ON
      EMSCRIPTEN_VERSION: "1.39.20"

    steps:
    - uses: actions/checkout@v2

    - name: üìö Install Emscripten
      working-directory: ${{runner.workspace}}
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DCMAKE_TOOLCHAIN_FILE=${{runner.workspace}}/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake --build . --config $BUILD_TYPE -j 2

    - name: üì¶ Archive desktop web app
      uses: actions/upload-artifact@v2
      with:
        name: webapp-desktop
        path: ui-cpp/ui-imgui/webapp/

  deploy-pypi:
    if: github.event_name != 'pull_request'
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_UI_CXX_USE_QT=OFF
      SPIRIT_ADD_VERSION_SUFFIX: true

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: ‚öô Configure environment
      shell: bash
      if: github.ref == 'refs/heads/master'
      run: echo "SPIRIT_ADD_VERSION_SUFFIX=false" >> $GITHUB_ENV

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install necessary packages
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy setuptools wheel twine

    - name: üõ† Build Python package
      shell: bash
      working-directory: ./core/python
      run: |
        echo "Python package build"
        echo "Add suffix to spirit version tag for python package $SPIRIT_ADD_VERSION_SUFFIX"
        python setup.py sdist bdist_wheel

    - name: üöÄ Deploy to TestPyPI
      working-directory: ./core/python
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      if: github.ref != 'refs/heads/master'
      run: twine upload --skip-existing --repository testpypi dist/*

    - name: üöÄ Deploy to PyPI
      working-directory: ./core/python
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      if: github.ref == 'refs/heads/master'
      run: twine upload --skip-existing dist/*

  deploy-package:
    if: github.event_name != 'pull_request'
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_BUNDLE_APP=ON

    steps:
    - uses: actions/checkout@v2

    - name: üìö Install required system packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake --build . --config $BUILD_TYPE -j 2
        cmake --install .
        cmake --build . --config $BUILD_TYPE -j 2 --target package

    - name: üì¶ Archive ubuntu package
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: spirit-ubuntu
        path: |
          ${{runner.workspace}}/build/*.tar.gz

    - name: üì¶ Archive macos package
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v2
      with:
        name: spirit-macos
        path: |
          ${{runner.workspace}}/build/*.dmg
          ${{runner.workspace}}/build/install/README.md
          ${{runner.workspace}}/build/install/LICENSE.txt
          ${{runner.workspace}}/build/install/VERSION.txt
          ${{runner.workspace}}/build/install/licenses/

    - name: üì¶ Archive windows package
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: spirit-windows
        path: |
          ${{runner.workspace}}/build/*.zip

  draft-release:
    if: github.event_name == 'push' && startsWith( github.ref, 'refs/tags/' )
    needs: [test, webapp-mobile, webapp-desktop, deploy-package]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v2

    - name: üìÑ Generate a changelog
      id: changelog
      uses: metcalfc/changelog-generator@v1.0.0
      with:
        myToken: ${{ secrets.GITHUB_TOKEN }}

    - name: üìÑ Print the changelog
      run: echo "${{ steps.changelog.outputs.changelog }}"

    - name: üéâ Create draft release
      id: draft_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: true